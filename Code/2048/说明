实现一个简单的2048的功能
-----v-1.0-----
首先，制作每个数字的生成,通过初始化先生成一个随机数字和prefab组件。
包括实现随时生成数字大小（2/4），以及数字的随机位置，。
此外还有一些可以复用的函数，比如销毁所有的节点，生成prefab节点，将prefab节点添加到canvas中等等

接下来实现手指移动来控制数字移动。
通过监听函数，获取手指的初始位置和结束位置，来判断是否移动，移动的方向。
对不同的方向，进行不同的位置移动。
在移动过程中（以右移为例），需要判断游戏逻辑的进行，如数字移动后的位置，数字是否移动，游戏是否失败等等
提取每一行的有数字的位置，然后合并，并更新数字位置数组nodepos，与旧数字位置oldnodepos判断，是否移动了。
同时对剩余空间进行判断，是否有空位，以及没有空位是否能够合并的，来判断游戏是否失败。

当这些都判断完，没有问题时，就可以销毁原来的数字节点，添加新的数字节点（此时是一个直接添加数字的过程，没有移动的效果）

-----v-1.1-----
添加了数字的移动效果和撤回、重新开始按钮。
首先是撤回功能，保留旧数字位置数组oldnodepos，一直到下一次移动前才更新，如果点击撤回按钮，则会自动按旧数字位置数组更新数字节点
接着是重新开始，只需销毁所有的数字节点，在重新初始化即可。
最后是数字的移动效果，需要使用到Update和lateUpdate两个函数，对图片进行逐帧的移动。
同样以右移为例，此时需要一个move来上锁，当右移时，无法进行其他操作，确保直到右移结束后，才能继续进行下一次右移。
此外还有一些其他参数来判断移动的效果，如canMove判断移动方向，move1、move2、move3三个数组来存放移动一格、两格、三格的所有数字位置。
通过move1、2、3三个数组在Update函数中进行移动效果。
在lateUpdate函数中对移动终止的判断，是否停止移动并解除锁，允许下一次移动。
